{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMlis3uMG3DrbVbSLMb+xpg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EitMD/EspIDMD/blob/main/SheHulk_Datalets/SheHulk_Churn.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Datalet Churn para el grupo de Actuarios de ACME Inc.**\n",
        "\n",
        "## **Problema:**\n",
        "\n",
        "Trabajaremos en conjunto al departamento de marketing de la compañia de ecommerce de **_ACME_** en el departamento de ventas. **_ACME_** tiene un software de pronóstico de ventas montado en **FORTRAN 77**, el cual tiene un timeframe de 30 días como máximo para el pronóstico. \n",
        "\n",
        "Aunado a ello, tiene carencias en sus procesos de actualización de data, pues en uno de ellos tarda 30 días en poder recibir los cambios en alguna variable, mientras que su tiempo de ejecución es de 7 días.\n",
        "\n",
        "La certeza que se tiene en dicho software es del 85%.\n",
        "\n",
        "Se realizará un nuevo software de pronóstico con su histórico para poder no solo incrementar su certeza a más de un 88%, sino incrementar el timeframe que se maneja, así como reducir el tiempo de ejecución de procesos."
      ],
      "metadata": {
        "id": "TJGJZU3fXi_U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Pasos a seguir:**"
      ],
      "metadata": {
        "id": "yK35RACP0Tyf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###*Importamos las librerías a utilizar.* \n",
        "En este caso:\n",
        "1. Pandas\n",
        "2. Numpy\n",
        "3. matplotlib\n",
        "4. seaborn"
      ],
      "metadata": {
        "id": "RCfMOaqqXo-N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "sns.set()"
      ],
      "metadata": {
        "id": "zVAsRAvUx1X2"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Lectura del Dataset\n",
        "\n",
        "Leeremos desde el repositorio el archivo con la información del Dataset"
      ],
      "metadata": {
        "id": "ubwK3H08y4De"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/EitMD/EspIDMD/"
      ],
      "metadata": {
        "id": "_ECAbuGAVWP2",
        "outputId": "f748b19e-d815-4f41-853b-9072c276cfbb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'EspIDMD' already exists and is not an empty directory.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Transformamos el dataset en un Dataframe y le hacemos una copia para poder trabajar con ella sin afectar el archivo original."
      ],
      "metadata": {
        "id": "00r8WjdQXoxQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('EspIDMD/SheHulk_Datalets/churn.csv')\n",
        "df_churn=df.copy()"
      ],
      "metadata": {
        "id": "NxZrVWbGx-JR"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Obtenemos la dimensión del dataset"
      ],
      "metadata": {
        "id": "dr2dFEJQwQqt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('The shape of the dataset is:', df_churn.shape)"
      ],
      "metadata": {
        "id": "Mm4kBI5yyhUe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ffebdf7-f635-4a6d-a2f4-70f7a3492c07"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The shape of the dataset is: (5000, 21)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fi-aZp61vev4",
        "outputId": "8f312ff6-6f51-444e-f019-e30c89d839c0"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5000 entries, 0 to 4999\n",
            "Data columns (total 21 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   State           5000 non-null   object \n",
            " 1   Account Length  5000 non-null   int64  \n",
            " 2   Area Code       5000 non-null   int64  \n",
            " 3   Phone           5000 non-null   object \n",
            " 4   Int'l Plan      5000 non-null   object \n",
            " 5   VMail Plan      5000 non-null   object \n",
            " 6   VMail Message   5000 non-null   int64  \n",
            " 7   Day Mins        5000 non-null   float64\n",
            " 8   Day Calls       5000 non-null   int64  \n",
            " 9   Day Charge      5000 non-null   float64\n",
            " 10  Eve Mins        5000 non-null   float64\n",
            " 11  Eve Calls       5000 non-null   int64  \n",
            " 12  Eve Charge      5000 non-null   float64\n",
            " 13  Night Mins      5000 non-null   float64\n",
            " 14  Night Calls     5000 non-null   int64  \n",
            " 15  Night Charge    5000 non-null   float64\n",
            " 16  Intl Mins       5000 non-null   float64\n",
            " 17  Intl Calls      5000 non-null   int64  \n",
            " 18  Intl Charge     5000 non-null   float64\n",
            " 19  CustServ Calls  5000 non-null   int64  \n",
            " 20  Churn?          5000 non-null   object \n",
            "dtypes: float64(8), int64(8), object(5)\n",
            "memory usage: 820.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#df_churn.head()\n",
        "df_churn.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "H3UZqWD7wzpi",
        "outputId": "a14777a1-e4bc-408f-db60-b4c5a24e4172"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Account Length    Area Code  VMail Message     Day Mins   Day Calls  \\\n",
              "count     5000.000000  5000.000000    5000.000000  5000.000000  5000.00000   \n",
              "mean       101.675800   773.791400     226.680000     5.518757     3.50460   \n",
              "std         57.596762    63.470888     273.998527     3.433485     1.68812   \n",
              "min          1.000000   657.000000       0.000000     0.000215     0.00000   \n",
              "25%         52.000000   736.000000       0.000000     2.682384     2.00000   \n",
              "50%        102.000000   778.000000       0.000000     5.336245     3.00000   \n",
              "75%        151.000000   806.000000     400.000000     7.936151     5.00000   \n",
              "max        200.000000   878.000000    1300.000000    16.897529    10.00000   \n",
              "\n",
              "        Day Charge     Eve Mins    Eve Calls   Eve Charge   Night Mins  \\\n",
              "count  5000.000000  5000.000000  5000.000000  5000.000000  5000.000000   \n",
              "mean      5.018902     5.026199     3.140400     5.017557     4.000917   \n",
              "std       2.195759     2.135487     2.525621     2.127857     1.631001   \n",
              "min       0.004777     0.004659     0.000000     0.013573     0.008468   \n",
              "25%       3.470151     3.588466     1.000000     3.529613     2.921998   \n",
              "50%       4.988291     5.145656     3.000000     5.006860     3.962089   \n",
              "75%       6.559750     6.552962     5.000000     6.491725     5.100128   \n",
              "max      12.731936    13.622097    14.000000    12.352871    10.183378   \n",
              "\n",
              "       Night Calls  Night Charge    Intl Mins   Intl Calls  Intl Charge  \\\n",
              "count  5000.000000   5000.000000  5000.000000  5000.000000  5000.000000   \n",
              "mean    224.790000      5.023490     5.025876     5.475400     4.328242   \n",
              "std      97.302875      1.748900     1.019302     1.877045     2.440311   \n",
              "min       0.000000      0.054863     1.648514     0.000000     0.000769   \n",
              "25%     150.000000      3.873157     4.349726     4.000000     2.468225   \n",
              "50%     200.000000      5.169154     5.034905     5.000000     4.214058   \n",
              "75%     300.000000      6.272015     5.716386     7.000000     5.960654   \n",
              "max     550.000000     10.407778     8.405644    12.000000    14.212261   \n",
              "\n",
              "       CustServ Calls  \n",
              "count     5000.000000  \n",
              "mean         5.525800  \n",
              "std          2.041217  \n",
              "min          0.000000  \n",
              "25%          4.000000  \n",
              "50%          6.000000  \n",
              "75%          7.000000  \n",
              "max         13.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7063adbd-a2d7-4ea1-90a2-bffcd600303f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Account Length</th>\n",
              "      <th>Area Code</th>\n",
              "      <th>VMail Message</th>\n",
              "      <th>Day Mins</th>\n",
              "      <th>Day Calls</th>\n",
              "      <th>Day Charge</th>\n",
              "      <th>Eve Mins</th>\n",
              "      <th>Eve Calls</th>\n",
              "      <th>Eve Charge</th>\n",
              "      <th>Night Mins</th>\n",
              "      <th>Night Calls</th>\n",
              "      <th>Night Charge</th>\n",
              "      <th>Intl Mins</th>\n",
              "      <th>Intl Calls</th>\n",
              "      <th>Intl Charge</th>\n",
              "      <th>CustServ Calls</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.00000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>101.675800</td>\n",
              "      <td>773.791400</td>\n",
              "      <td>226.680000</td>\n",
              "      <td>5.518757</td>\n",
              "      <td>3.50460</td>\n",
              "      <td>5.018902</td>\n",
              "      <td>5.026199</td>\n",
              "      <td>3.140400</td>\n",
              "      <td>5.017557</td>\n",
              "      <td>4.000917</td>\n",
              "      <td>224.790000</td>\n",
              "      <td>5.023490</td>\n",
              "      <td>5.025876</td>\n",
              "      <td>5.475400</td>\n",
              "      <td>4.328242</td>\n",
              "      <td>5.525800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>57.596762</td>\n",
              "      <td>63.470888</td>\n",
              "      <td>273.998527</td>\n",
              "      <td>3.433485</td>\n",
              "      <td>1.68812</td>\n",
              "      <td>2.195759</td>\n",
              "      <td>2.135487</td>\n",
              "      <td>2.525621</td>\n",
              "      <td>2.127857</td>\n",
              "      <td>1.631001</td>\n",
              "      <td>97.302875</td>\n",
              "      <td>1.748900</td>\n",
              "      <td>1.019302</td>\n",
              "      <td>1.877045</td>\n",
              "      <td>2.440311</td>\n",
              "      <td>2.041217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>657.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000215</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.004777</td>\n",
              "      <td>0.004659</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.013573</td>\n",
              "      <td>0.008468</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.054863</td>\n",
              "      <td>1.648514</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000769</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>52.000000</td>\n",
              "      <td>736.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.682384</td>\n",
              "      <td>2.00000</td>\n",
              "      <td>3.470151</td>\n",
              "      <td>3.588466</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.529613</td>\n",
              "      <td>2.921998</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>3.873157</td>\n",
              "      <td>4.349726</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.468225</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>102.000000</td>\n",
              "      <td>778.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.336245</td>\n",
              "      <td>3.00000</td>\n",
              "      <td>4.988291</td>\n",
              "      <td>5.145656</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>5.006860</td>\n",
              "      <td>3.962089</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>5.169154</td>\n",
              "      <td>5.034905</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.214058</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>151.000000</td>\n",
              "      <td>806.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>7.936151</td>\n",
              "      <td>5.00000</td>\n",
              "      <td>6.559750</td>\n",
              "      <td>6.552962</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>6.491725</td>\n",
              "      <td>5.100128</td>\n",
              "      <td>300.000000</td>\n",
              "      <td>6.272015</td>\n",
              "      <td>5.716386</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>5.960654</td>\n",
              "      <td>7.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>200.000000</td>\n",
              "      <td>878.000000</td>\n",
              "      <td>1300.000000</td>\n",
              "      <td>16.897529</td>\n",
              "      <td>10.00000</td>\n",
              "      <td>12.731936</td>\n",
              "      <td>13.622097</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>12.352871</td>\n",
              "      <td>10.183378</td>\n",
              "      <td>550.000000</td>\n",
              "      <td>10.407778</td>\n",
              "      <td>8.405644</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>14.212261</td>\n",
              "      <td>13.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7063adbd-a2d7-4ea1-90a2-bffcd600303f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7063adbd-a2d7-4ea1-90a2-bffcd600303f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7063adbd-a2d7-4ea1-90a2-bffcd600303f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Limpieza de datos"
      ],
      "metadata": {
        "id": "LT-RYl9eXpBB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3PFMK_Esh2yx",
        "outputId": "49df52ca-1d0c-4abd-a77d-190b59f3c3b2"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State             0\n",
              "Account Length    0\n",
              "Area Code         0\n",
              "Phone             0\n",
              "Int'l Plan        0\n",
              "VMail Plan        0\n",
              "VMail Message     0\n",
              "Day Mins          0\n",
              "Day Calls         0\n",
              "Day Charge        0\n",
              "Eve Mins          0\n",
              "Eve Calls         0\n",
              "Eve Charge        0\n",
              "Night Mins        0\n",
              "Night Calls       0\n",
              "Night Charge      0\n",
              "Intl Mins         0\n",
              "Intl Calls        0\n",
              "Intl Charge       0\n",
              "CustServ Calls    0\n",
              "Churn?            0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Selección de variables\n",
        "\n",
        "### *Variable Objetivo*"
      ],
      "metadata": {
        "id": "3P5weQF_XpDx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn.drop(columns=[\"State\",\"Phone\",\"Int'l Plan\",\"VMail Plan\",\"Area Code\"], inplace=True)"
      ],
      "metadata": {
        "id": "-KRK8YRJafeK"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn['Churn?'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mF85iEZ3hi6y",
        "outputId": "3b13f06c-1261-4bdc-f87e-74eb57554e7d"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False.    2502\n",
              "True.     2498\n",
              "Name: Churn?, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn['Churn?'].value_counts(normalize=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WVaVPZxNk5IE",
        "outputId": "877e3642-b5c8-49a2-ea8f-5e420678e468"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False.    0.5004\n",
              "True.     0.4996\n",
              "Name: Churn?, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data=df_churn,x='Churn?')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "_NBJ2qQKhpaw",
        "outputId": "c6374863-30c4-4ab4-dfa0-134e05c68b4b"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f18ca2187d0>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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7DEdO3ZMI0aMkNvt1ltvvaUtW7ZIkn73u981+3rHjh06dOiQfD6fkpKStHbtWiUmJobzKeAuU1JSoldffVU3btyQJD333HMaP378F7b7xS9+odLSUsXExMhms+nVV19VXFyc/vrXv2rz5s365JNPJEnLly/X5MmTrXwKdx1igpDU19frN7/5jaRb8WhJcXGx/vOf/2j//v2y2+3as2ePXnzxRf3sZz+zalTcpZYvXx48zbV48WLt379fNptN//rXv/T000/r7bffbrZ9bW2tdu/erXfeeUexsbGqr69XbGysrl27ptzcXO3YsUP9+/fX5cuXNXv2bJWWliouLi4cT+2uQEwQkm9+M7QrJB85ckTl5eX61re+JenWNdN69+4aV9FFZPv8aa5Tp05pwYIFunTpkqKjo3XlyhVVVlY2OwLu06eP7r33XmVlZWnChAmaPHmyevfurQ8++EAXL17UokWLgtvabDZduHBBDzzwgOXP625BTBCSnj17Bv8dFRUlv98f/LqxsTH470AgoCVLlmj27NmWzofuZeXKlcrOztbUqVPl9/v11a9+tdl+KN3aT/fv36/3339fx44d07e//W3t3LlTgUBAKSkpKioqCtP0dyfeGow2Gzx4sM6cOaOmpiY1NTWprKwsuObxeLRnzx5dvXpVktTU1KR//OMf4RoVd6m6ujoNHDhQkvTb3/5WTU1NX9imvr5e1dXVeuihh7R8+XKNGDFCZ8+e1dixY3XhwgUdO3YsuO2pU6fElaXMcGSCNhszZozGjx+vxx9/XP3799fIkSNVWVkp6dbpsNraWs2bN0/SrSOV7373uxo5cqQOHz6sI0eOaP369eEcH3eB559/Xj/84Q/1pS99SRMnTpTT6fzCNvX19Vq2bJkaGhoUCAQ0atQoPfLII4qJidH27du1adMmbdiwQTdu3NCgQYNUWFgom82mWbNmaceOHUpKSgrDM4tcXOgRAGCM01wAAGPEBABgjJgAAIwREwCAMWICADBGTIBOtnXrVq1atSrcYwCdis+ZAB2kpKREu3bt0rlz59SrVy+NHDlSzz77rKUzXLt2TevWrdN7772npqYmPfHEE3rhhRdks9ksnQPdDzEBOsCuXbu0Y8cO/fSnP9WECRN0zz336OjRozp8+HCzS9GYutOfALh69apGjRqlF154QY2NjZo7d67S09P12GOPddgMwO3woUXAUF1dnSZNmqQNGzbo0Ucf/cL61q1b9c9//lMxMTF6/fXXlZycrBdffDF4UcGUlBQdOnRIgwcPliRlZ2crKSlJK1as0PHjx7V69WrNmzdPv/rVr/S1r31N9957b6vf7/MWLFigyZMn66mnnurc/wjo9njNBDD0wQcfqLGxUdOmTWtxmyNHjujxxx/XiRMn5PF4tHbt2pC//5UrV3T16lW9+eabwfuF8v0OHjyoDz/8UFOnTm37kwLaiJgAhmpra9W3b99WTz+lp6fr4YcfVlRUlGbNmtWmi1/a7XYtX75cDodDsbGxIX2/EydO6Cc/+Ym2b98ul8vVvicGtAExAQw5nU7V1NTo5s2bLW7Tr1+/4L9jY2PV2NjY6vaf17dv3+AfhQr1++3du1c/+MEP5Ha7Q30agBFiAhgaO3asHA6H3njjjXbdv0ePHrp+/Xrw68+uwPyZ9rwT6/Lly1z1Fpbi3VyAoT59+mj58uXKy8tTdHS0vv71rys6Olrvvfeejh8/rh49erR6/5EjR6q0tFTDhw/Xu+++qz//+c9KS0szmmnr1q3BU2KAFTgyATrA/PnzlZ2dre3bt2v8+PGaPHmyioqKQnrxe82aNXrzzTfldrtVUlLSIS+Yr1q1Sq+99prx9wFCxVuDAQDGODIBABgjJgAAY8QEAGCMmAAAjBETAIAxYgIAMEZMAADGiAkAwBgxAQAY+z9AmNZX00hm5AAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Separación de datos y Normalización"
      ],
      "metadata": {
        "id": "-FY8o4_YyyMU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#def mean_norm(df_input):\n",
        "#    return df_input.apply(lambda x: (x-x.mean())/ x.std(), axis=0)\n",
        "\n",
        "def quantile_norm(df_input):\n",
        "    sorted_df = pd.DataFrame(np.sort(df_input.values,axis=0), index=df_input.index, columns=df_input.columns)\n",
        "    mean_df = sorted_df.mean(axis=1)\n",
        "    mean_df.index = np.arange(1, len(mean_df) + 1)\n",
        "    quantile_df =df_input.rank(method=\"min\").stack().astype(int).map(mean_df).unstack()\n",
        "    return(quantile_df)\n"
      ],
      "metadata": {
        "id": "eDk9oKjp98cA"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_churn = df_churn.groupby(df_churn['Churn?'])\n",
        "df1= df_churn.get_group(\"True.\")\n",
        "df2= df_churn.get_group(\"False.\")\n",
        "#df_churn.describe()"
      ],
      "metadata": {
        "id": "9wr2c14QRVmO"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train=df1.sample(frac=0.80)\n",
        "train=train.append(df2.sample(frac=0.80))\n",
        "#train"
      ],
      "metadata": {
        "id": "FAClOmFdGT9U"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test=df1.sample(frac=0.20)\n",
        "test=test.append(df2.sample(frac=0.20))\n",
        "#test"
      ],
      "metadata": {
        "id": "mF_kezIZNbAY"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = train.drop('Churn?', axis=1)\n",
        "y_train = train['Churn?']\n",
        "X_test = test.drop('Churn?', axis=1)\n",
        "y_test = test['Churn?']"
      ],
      "metadata": {
        "id": "RtG67tDkh2vs"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#X_train = mean_norm(X_train)\n",
        "#X_test = mean_norm(X_test)\n",
        "\n",
        "\n",
        "X_train = quantile_norm(X_train)\n",
        "X_test = quantile_norm(X_test)"
      ],
      "metadata": {
        "id": "cnt6xNTB94Pa"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Implementación de Modelo  \n",
        "\n",
        "##*Regresion Logística*"
      ],
      "metadata": {
        "id": "kLKw5MYmXpGm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression"
      ],
      "metadata": {
        "id": "jz-nYrWWY9Jj"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log_model = LogisticRegression()"
      ],
      "metadata": {
        "id": "5Tw0H8lxY9ES"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "log_model.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lLJCBitNY83r",
        "outputId": "83800cf7-8983-42e4-9119-49bfa6f79e69"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "odds=log_model.coef_\n",
        "odds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dPzybQgIeHBu",
        "outputId": "4ce48707-402f-490b-c699-b80ad8f49174"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.00165112, -0.00475843, -0.00490926,  0.00059278,  0.02852817,\n",
              "         0.03910297, -0.01164789,  0.00221297, -0.00425487, -0.06991535,\n",
              "         0.02794878,  0.00031929, -0.00121467, -0.00198225,  0.00301641]])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Validación"
      ],
      "metadata": {
        "id": "ZKh02Jgo-LyH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,plot_confusion_matrix\n",
        "from sklearn.metrics import f1_score"
      ],
      "metadata": {
        "id": "gDwPZNr5CUfg"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = log_model.predict(X_test)"
      ],
      "metadata": {
        "id": "MMaqVHpECYBC"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "02vIX9cnCX-a",
        "outputId": "08fe27e9-3c90-49b6-c218-2895d629498a"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.865"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b94fT3FsCX7q",
        "outputId": "2f2cf060-470e-45e8-880e-5e095d173b09"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[423,  77],\n",
              "       [ 58, 442]])"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_confusion_matrix(log_model,X_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "bRApyoVODDij",
        "outputId": "242737d5-afbc-40c0-975c-2b6d17a1ec91"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f18ca1213d0>"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Scaled so highest value=1\n",
        "plot_confusion_matrix(log_model,X_test,y_test,normalize='true')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "Tl4Ryu60DD6l",
        "outputId": "b938eb5f-8b38-480e-925f-4430ffd4017d"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f18ca144fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rsQ_5iKzDb52",
        "outputId": "68e41579-e1b5-46cf-b6f1-d587342ce182"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      False.       0.88      0.85      0.86       500\n",
            "       True.       0.85      0.88      0.87       500\n",
            "\n",
            "    accuracy                           0.86      1000\n",
            "   macro avg       0.87      0.86      0.86      1000\n",
            "weighted avg       0.87      0.86      0.86      1000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##*ROC Curve & AUC Curve*"
      ],
      "metadata": {
        "id": "nCLFKDDZELrq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_curve,plot_precision_recall_curve,plot_roc_curve"
      ],
      "metadata": {
        "id": "h2nGarabDspN"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_precision_recall_curve(log_model,X_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "KRZIeUnHDsmd",
        "outputId": "8d79ca8c-cd1c-408c-fd3b-4a1ccd4b52d7"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_precision_recall_curve is deprecated; Function `plot_precision_recall_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: PrecisionRecallDisplay.from_predictions or PrecisionRecallDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay at 0x7f18c9fc3e50>"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_roc_curve(log_model,X_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "0O0IJ9-iD26M",
        "outputId": "1767dff1-66f0-4afa-fabc-5c5f76cd64d8"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x7f18ca0890d0>"
            ]
          },
          "metadata": {},
          "execution_count": 69
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}